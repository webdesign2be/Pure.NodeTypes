prototype(TYPO3.Neos:Content) {
	# remove default Neos class processing
	attributes.class.@process.nodeType >

	# Define short nodeType name (without package prefix)
	@override.nodeTypeShort = ${String.toLowerCase(String.substr(q(node).property('_nodeType.name'), 1+String.lastIndexOf(q(node).property('_nodeType.name'), ':')))}

	attributes.class = TYPO3.TypoScript:RawArray {
		# Copied from original TYPO3.Neos:Content - adds class with Neos node-type
		nodeType = ${String.trim(String.toLowerCase(String.pregReplace(q(node).property('_nodeType.name'), '/[[:^alnum:]]/', '-')))}
		nodeType.@position = 'start'

		textAlign = ${q(node).property('classTextAlign')}
		textAlign.@position = '20'

		clearfix = ${q(node).property('classClearfix') ? 'clearfix' : null}
		clearfix.@after = '40'

		float = ${q(node).property('classFloat')}
		float.@after = 'clearfix'

		showByScreenSize = ${q(node).property('classShowByScreenSize')}
		showByScreenSize.@position = '60'

		hideByScreenSize = ${q(node).property('classHideByScreenSize')}
		hideByScreenSize.@after = 'showByScreenSize'

		orientationDetection = ${q(node).property('classOrientationDetection')}
		orientationDetection.@position = '70'

		touchDetection = ${q(node).property('classTouchDetection')}
		touchDetection.@after = 'orientationDetection'

		radiusAndRounded = ${q(node).property('classRadiusAndRounded')}
		radiusAndRounded.@position = '80'

		hide = ${q(node).property('classHide') ? 'hide' : null}
		hide.@position = '100'

		# Add extra class 'style-x [nodeTypeShort]-style-x
		customLook = ${q(node).property('customLook') ? q(node).property('customLook')+' '+nodeTypeShort+'-'+q(node).property('customLook') : null}
		customLook.@position = 'end 10'

		customClass = ${q(node).property('customCssClass')}
		customClass.@position = 'end 20'
	}
	attributes.id = ${q(node).property('customHtmlId') ? String.trim(q(node).property('customHtmlId')) : null}
	attributes.style = ${q(node).property('customCssCode') ? String.trim(q(node).property('customCssCode')) : null}
	attributes.customUserAttributes = ${q(node).property('customUserAttributes') ? q(node).property('customUserAttributes') : null}

	# Prepare container for another/extra set of attributes - can be used for
	# additional outer wrapper etc. Not harmful when not used and/or empty.
	extraAttributes = TYPO3.TypoScript:Attributes {
		class = TYPO3.TypoScript:RawArray
		# Nullify class if it's empty - so then it's not rendered *at all*.
		# It's important to have it as NULL as we might check in the template if
		# extraAttributes exists and if so, extra wrapper or attribute might be rendered.
		class.@process.nullify {
			expression = ${Array.join(value,'') ? value : null}
			@position = 'end'
		}
	}

	# Support for custom semantic wrapper tag from Pure.NodeTypes:AbstractDevCustomTag
	tagName = ${q(node).property('customTagName')}
	tagName.@process.default = ${value ? value : 'div'}

	# Support for font icon in all content types
	# Or shall it be included on per-content basis, only where necessary?
	fontIcon = Pure.NodeTypes:FontIconAbstract
}
